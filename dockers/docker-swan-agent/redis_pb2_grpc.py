# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import redis_pb2 as redis__pb2


class RedisTableStub(object):
    """RedisTable is a service for creating and updating redis entries. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Set = channel.unary_unary(
                '/pb.RedisTable/Set',
                request_serializer=redis__pb2.RedisTableSetRequest.SerializeToString,
                response_deserializer=redis__pb2.RedisTableResponse.FromString,
                )
        self.Del = channel.unary_unary(
                '/pb.RedisTable/Del',
                request_serializer=redis__pb2.RedisTableDelRequest.SerializeToString,
                response_deserializer=redis__pb2.RedisTableResponse.FromString,
                )
        self.Get = channel.unary_unary(
                '/pb.RedisTable/Get',
                request_serializer=redis__pb2.RedisTableGetRequest.SerializeToString,
                response_deserializer=redis__pb2.RedisTableGetResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/pb.RedisTable/Ping',
                request_serializer=redis__pb2.RedisTablePingRequest.SerializeToString,
                response_deserializer=redis__pb2.RedisTablePingResponse.FromString,
                )
        self.WarmRestart = channel.unary_unary(
                '/pb.RedisTable/WarmRestart',
                request_serializer=redis__pb2.RedisTableWarmRestartRequest.SerializeToString,
                response_deserializer=redis__pb2.RedisTableWarmRestartResponse.FromString,
                )


class RedisTableServicer(object):
    """RedisTable is a service for creating and updating redis entries. 
    """

    def Set(self, request, context):
        """Create/update the field value pairs for a key in redis.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Del(self, request, context):
        """Delete a key from redis.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Get the field value pairs associated with a particular key from redis.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Ping APPL_DB as a proxy for SONiC health.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WarmRestart(self, request, context):
        """WarmRestart retrieves SWAN programmed keys from redis to enable warm restart to occur.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedisTableServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Set': grpc.unary_unary_rpc_method_handler(
                    servicer.Set,
                    request_deserializer=redis__pb2.RedisTableSetRequest.FromString,
                    response_serializer=redis__pb2.RedisTableResponse.SerializeToString,
            ),
            'Del': grpc.unary_unary_rpc_method_handler(
                    servicer.Del,
                    request_deserializer=redis__pb2.RedisTableDelRequest.FromString,
                    response_serializer=redis__pb2.RedisTableResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=redis__pb2.RedisTableGetRequest.FromString,
                    response_serializer=redis__pb2.RedisTableGetResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=redis__pb2.RedisTablePingRequest.FromString,
                    response_serializer=redis__pb2.RedisTablePingResponse.SerializeToString,
            ),
            'WarmRestart': grpc.unary_unary_rpc_method_handler(
                    servicer.WarmRestart,
                    request_deserializer=redis__pb2.RedisTableWarmRestartRequest.FromString,
                    response_serializer=redis__pb2.RedisTableWarmRestartResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.RedisTable', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RedisTable(object):
    """RedisTable is a service for creating and updating redis entries. 
    """

    @staticmethod
    def Set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.RedisTable/Set',
            redis__pb2.RedisTableSetRequest.SerializeToString,
            redis__pb2.RedisTableResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Del(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.RedisTable/Del',
            redis__pb2.RedisTableDelRequest.SerializeToString,
            redis__pb2.RedisTableResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.RedisTable/Get',
            redis__pb2.RedisTableGetRequest.SerializeToString,
            redis__pb2.RedisTableGetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.RedisTable/Ping',
            redis__pb2.RedisTablePingRequest.SerializeToString,
            redis__pb2.RedisTablePingResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WarmRestart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.RedisTable/WarmRestart',
            redis__pb2.RedisTableWarmRestartRequest.SerializeToString,
            redis__pb2.RedisTableWarmRestartResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
